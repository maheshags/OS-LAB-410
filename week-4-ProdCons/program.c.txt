#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0, out = 0;
int item = 0;

sem_t empty, full, mutex;

void *producer(void *arg) {
    while (1) {
        printf("\nEnter 1 to produce, 2 to consume, 3 to exit: ");
        int choice;
        scanf("%d", &choice);

        if (choice == 1) {
            if (sem_trywait(&empty) == 0) {  // Check if space is available
                sem_wait(&mutex);
                int produced_item = ++item;
                buffer[in] = produced_item;
                printf("Producer produced: Item %d\n", produced_item);
                in = (in + 1) % BUFFER_SIZE;
                sem_post(&mutex);
                sem_post(&full);
            } else {
                printf("Buffer is full! Consume an item first.\n");
            }
        }
        else if (choice == 2) {
            if (sem_trywait(&full) == 0) {  // Check if items are available
                sem_wait(&mutex);
                int consumed_item = buffer[out];
                printf("Consumer consumed: Item %d\n", consumed_item);
                out = (out + 1) % BUFFER_SIZE;
                sem_post(&mutex);
                sem_post(&empty);
            } else {
                printf("Buffer is empty! Produce an item first.\n");
            }
        }
        else if (choice == 3) {
            printf("Exiting...\n");
            pthread_exit(NULL);
        }
        else {
            printf("Invalid choice! Try again.\n");
        }
    }
}

int main() {
    pthread_t thread;

    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);

    pthread_create(&thread, NULL, producer, NULL);
    pthread_join(thread, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
